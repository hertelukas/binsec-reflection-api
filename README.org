* BINSEC Tool-Independent Summaries Plugin

This BINSEC plugin implements the API proposed by Ramos et al. in their [[https://drops.dagstuhl.de/storage/00lipics/lipics-vol263-ecoop2023/LIPIcs.ECOOP.2023.24/LIPIcs.ECOOP.2023.24.pdf][paper]]
on tool-independent summaries. It supports calls to the symbolic reflection API,
enabling direct manipulation of symbolic state from C code.

This approach allows different symbolic execution engines to share their
summaries, eliminating the need to manually writ them for each tool - a process
that is both cumbersome and prone to errors.

Summaries  make symbolic execution significantly faster (up to 10'000x for
BINSEC) and prevent many executions from timing out, making analysis feasible
in cases that would otherwise be impractical. This speedup comes from
drastically reducing the number of paths (up to 100,000x fewer for BINSEC) by
encoding functions like those from the ~libc~ as symbolic expression over their
inputs. For example, rather than introducing a new path for each character in
a string for ~strlen~, the plugin can use a symbolic variable to represent the
string's length as a single expression, constructed by nesting multiple
if-then-else cases.

** Using the Plugin
*** Installation
#+begin_src bash
dune build
dune install
#+end_src

*** Run BINSEC witht he plugin
#+begin_src bash
binsec -sse -reflection <args>
#+end_src

* Primitives

All primitives are implemented, except for ~new_sym_var_array~ and all
the summary validation primitives.
